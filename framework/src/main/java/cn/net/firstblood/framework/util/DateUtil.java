package cn.net.firstblood.framework.util;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;/** * 日期工具类 * @author gangxiang.chengx * */public class DateUtil {    public static final String DEFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";        public static final String DATE_FORMAT_0 = "yyyy/MM/dd HH:mm:ss";    /**     * 将时间格式化返回     * @param date     * @param formatStyle     * @return     */    public static String format(Date date) {        if (date == null) {            return "";        }        return new SimpleDateFormat(DEFAULT_DATE_FORMAT).format(date);    }    /**     * 将时间格式化返回     * @param date     * @param formatStyle     * @return     */    public static String format(Date date, String formatStyle) {        if (date == null) {            return "";        }        return new SimpleDateFormat(formatStyle).format(date);    }    /**     * 获取当前时间seconds秒之后的时间     * @param when     * @param seconds     * @return     */    public static Date addTime(Date when, int seconds) {        Calendar c = Calendar.getInstance();        c.setTime(when);        c.add(Calendar.SECOND, seconds);        return c.getTime();    }    /**     * 将字符串转换成日期     * @param date     * @param dateformat     * @return     */    public static Date parseDate(String date) {        try {            return new SimpleDateFormat(DEFAULT_DATE_FORMAT).parse(date);        } catch (ParseException e) {            return null;        }    }    /**     * 将字符串转换成日期     * @param date     * @param dateformat     * @return     */    public static Date parseDate(String date, String dateformat) {        try {            return new SimpleDateFormat(dateformat).parse(date);        } catch (ParseException e) {            return null;        }    }    /**     * 获取当前时间days天之后的时间     * @param when     * @param days     * @return     */    public static Date addDays(Date when, int days) {        Calendar c = Calendar.getInstance();        c.setTime(when);        c.add(Calendar.DATE, days);        return c.getTime();    }    /**     * 获取当前时间months月之后的时间     * @param when     * @param months     * @return     */    public static Date addMonth(Date when, int months) {        Calendar c = Calendar.getInstance();        c.setTime(when);        c.add(Calendar.MONTH, months);        return c.getTime();    }        /**     * 获取当前时间years年之后的时间     * @param when     * @param years     * @return     */    public static Date addYear(Date when, int years) {        Calendar c = Calendar.getInstance();        c.setTime(when);        c.add(Calendar.YEAR, years);        return c.getTime();    }    /**     * 获取当前时间     * @return     */    public static Date getCurrentTime() {        return new Date();    }    /**     * 获取指定时间的凌晨     * @param date     * @return     */    public static Date getMorning(Date date) {        Calendar c = Calendar.getInstance();        c.setTime(date);        c.set(Calendar.HOUR_OF_DAY, 0);        c.set(Calendar.MINUTE, 0);        c.set(Calendar.SECOND, 0);        c.set(Calendar.MILLISECOND, 0);        return c.getTime();    }        /**     * 当前小时 0~23     * @return     */    public static int getHourOfDay() {    	Calendar c = Calendar.getInstance();        return c.get(Calendar.HOUR_OF_DAY);    }        public static int getYear() {    	Calendar c = Calendar.getInstance();        return c.get(Calendar.YEAR);    }    /**     * 获取天数间隔     * @param firstDate     * @param lastDate     * @return     */    public static int getTimeIntervalDays(Date firstDate, Date lastDate) {        long intervals = lastDate.getTime() - firstDate.getTime();        if (intervals > 0) {            long daysd = intervals / (24 * 60 * 60 * 1000);            return new Long(daysd).intValue();        }        return 0;    }}